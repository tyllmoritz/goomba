; generated by Norcroft  Thumb C vsn 1.20 (ARM Ltd SDT2.50) [Build number 80]


|x$codeseg| DATA

;;;1      #include "includes.h"
;;;2      
;;;3      FILE_ENTRY *FILES=(FILE_ENTRY*)&Image$$RO$$Limit;
;;;4      u16 *DATA=(u16*)0x06004000;
;;;5      u16 *TEMP=(u16*)0x06008000;
;;;6      
;;;7      /*
;;;8      
;;;9      
;;;10     extern u32 Image$$RO$$Limit;
;;;11     
;;;12     void hexdump(void* , int , char*);
;;;13     void swapmem (u32* , u32*, u32 ); //for overlapping memory regions
;;;14     void flushcache(void);
;;;15     void init_cache(int rompages,int vrompages, int mapper);
;;;16     
;;;17     int cistrcmp(const char *a, const char *b);
;;;18     bool str_equiv(const char* str1, const char* str2);
;;;19     void fixfilename(int type, char *filename);
;;;20     void mergesort (char files[][32], u16 data[], u16 temp[], int size);
;;;21     
;;;22     //supports about 7168 files in same directory before crashing
;;;23     typedef char FILE_ENTRY[32];
;;;24     FILE_ENTRY *FILES=(FILE_ENTRY*)&Image$$RO$$Limit;
;;;25     u16 *DATA=(u16*)0x06008000;
;;;26     u16 *TEMP=(u16*)0x0600C000;
;;;27     
;;;28     extern u8 END_OF_EXRAM;
;;;29     extern u8 AP32_COPY_POINT;
;;;30     int memcpybyte(u8*, u8*, u32);
;;;31     extern char SramName[256];
;;;32     extern u8* romstart;
;;;33     //u8* rom_base;
;;;34     extern u8 g_rompages;
;;;35     extern int usingcache;
;;;36     //int usingcompcache;
;;;37     extern int usinggbamp;
;;;38     extern File rom_file;
;;;39     
;;;40     extern char openFiles[2];
;;;41     
;;;42     extern u32 g_emuflags;			//from cart.s
;;;43     #define PALTIMING 4
;;;44     
;;;45     void waitframe(void);			//io.s
;;;46     //void depack(u8 *source, u8 *destination);
;;;47     
;;;48     void cls(int);
;;;49     void drawtext(int,char*,int);
;;;50     extern int selected;
;;;51     u32 getmenuinput(int menuitems);
;;;52     
;;;53     extern u32 AGBinput;			//from ppu.s
;;;54     extern u32 oldinput;
;;;55     
;;;56     extern u8 *textstart;//points to first GB rom (initialized by boot.s)
;;;57     
;;;58     */
;;;59     
;;;60     
;;;61     int getvalidfile(int reset, char *filename)
;;;62     {
000000                      getvalidfile
000000  b5b0                        PUSH     {r4,r5,r7,lr}
000002  1c04                        MOV      r4,r0
000004  1c0f                        MOV      r7,r1
                            F1L4
;;;63     	char *ext;
;;;64     	int type;
;;;65     	do
;;;66     	{
;;;67     		if (reset)
000006  2c00                        CMP      r4,#0
000008  d004                        BEQ      F1L29
;;;68     		{
;;;69     			reset=0;
00000a  2400                        MOV      r4,#0
;;;70     			type=FAT_FindFirstFileLFN(filename);
00000c  1c38                        MOV      r0,r7
00000e  f7ff fff7                   BL       FAT_FindFirstFile
000012  e002                        B        F1L30
                            F1L29
;;;71     		}
;;;72     		else
;;;73     		{
;;;74     			type=FAT_FindNextFileLFN(filename);
000014  1c38                        MOV      r0,r7
000016  f7ff fff3                   BL       FAT_FindNextFile
                            F1L30
;;;75     		}
;;;76     		if (type==0)
00001a  2800                        CMP      r0,#0
00001c  d102                        BNE      F1L31
                            F1L27
;;;77     			return 0;
00001e  bcb0                        POP      {r4,r5,r7}
000020  bc08                        POP      {r3}
000022  4718                        BX       r3
                            F1L31
;;;78     		if (type==2)
000024  2802                        CMP      r0,#2
000026  d104                        BNE      F1L32
;;;79     		{
;;;80     			if (filename[0]!='.')
000028  7838                        LDRB     r0,[r7,#0]
00002a  282e                        CMP      r0,#&2e
00002c  d0eb                        BEQ      F1L4
;;;81     			{
;;;82     				return 2;
00002e  2002                        MOV      r0,#2
000030  e7f5                        B        F1L27
                            F1L32
;;;83     			}
;;;84     		}
;;;85     		if (type==1)
000032  2801                        CMP      r0,#1
000034  d1e7                        BNE      F1L4
;;;86     		{
;;;87     			//ends with .gb/gbc?
;;;88     			if (filename!=NULL)
000036  2f00                        CMP      r7,#0
000038  d0e5                        BEQ      F1L4
;;;89     			{
;;;90     				ext=strrchr(filename,'.');
00003a  212e                        MOV      r1,#&2e
00003c  1c38                        MOV      r0,r7
00003e  f7ff ffdf                   BL       strrchr
;;;91     				if (ext)
000042  2800                        CMP      r0,#0
000044  d0df                        BEQ      F1L4
;;;92     				{
;;;93     					ext++;
;;;94     					if (str_equiv(ext,"gb") || str_equiv(ext,"gbc") )
000046  1c45                        ADD      r5,r0,#1
000048  1c28                        MOV      r0,r5
00004a  a106                        ADR      r1,F1L1
00004c  f7ff ffd8                   BL       str_equiv
000050  2800                        CMP      r0,#0
000052  d105                        BNE      F1L33
000054  1c28                        MOV      r0,r5
000056  a104                        ADR      r1,F1L1+4
000058  f7ff ffd2                   BL       str_equiv
00005c  2800                        CMP      r0,#0
00005e  d0d2                        BEQ      F1L4
                            F1L33
;;;95     					{
;;;96     						return 1;
000060  2001                        MOV      r0,#1
000062  e7dc                        B        F1L27
                            F1L1
000064  00006267                    DCB      DCB      "gb\0\0"
000068  00636267                    DCB      DCB      "gbc\0"

;;;97     					}
;;;98     				}
;;;99     			}
;;;100    		}
;;;101    	} while(1);
;;;102    }
;;;103    /*
;;;104    int countroms(void)
;;;105    {
;;;106    	char filename[256];
;;;107    	int count=0;
;;;108    	int type;
;;;109    	type=getvalidfile(1,filename);
;;;110    	while (type!=0)
;;;111    	{
;;;112    		count++;
;;;113    		type=getvalidfile(0,filename);
;;;114    	}
;;;115    	return count;
;;;116    }
;;;117    */
;;;118    int buildfiles(void)
;;;119    {
00006c                      buildfiles
00006c  b590                        PUSH     {r4,r7,lr}
00006e  b0c0                        SUB      sp,#&100
;;;120    	char filename[256];
;;;121    	int count=0;
000070  2700                        MOV      r7,#0
;;;122    	int type;
;;;123    	type=getvalidfile(1,filename);
000072  4669                        MOV      r1,sp
000074  2001                        MOV      r0,#1
000076  f7ff ffc3                   BL       getvalidfile
00007a  4c0f                        LDR      r4,F2L1
00007c  e011                        B        F2L12
                            F2L4
;;;124    	while (type!=0)
;;;125    	{
;;;126    		fixfilename(type,filename);
00007e  4669                        MOV      r1,sp
000080  f7ff ffbe                   BL       fixfilename
;;;127    		memcpy(FILES[count],filename,32);
000084  6821                        LDR      r1,[r4,#0]
000086  0178                        LSL      r0,r7,#5
000088  1840                        ADD      r0,r1
00008a  4669                        MOV      r1,sp
00008c  2220                        MOV      r2,#&20
00008e  f7ff ffb7                   BL       memcpy
;;;128    		DATA[count]=count;
000092  6862                        LDR      r2,[r4,#4]
000094  0079                        LSL      r1,r7,#1
000096  5257                        STRH     r7,[r2,r1]
;;;129    		count++;
;;;130    		type=getvalidfile(0,filename);
000098  4669                        MOV      r1,sp
00009a  2000                        MOV      r0,#0
00009c  3701                        ADD      r7,#1
00009e  f7ff ffaf                   BL       getvalidfile
                            F2L12
0000a2  2800                        CMP      r0,#0   ;;;124
0000a4  d1eb                        BNE      F2L4   ;;;124
;;;131    	}
;;;132    	mergesort(FILES,DATA,TEMP,count);
0000a6  cc07                        LDMIA    r4!,{r0-r2}
0000a8  1c3b                        MOV      r3,r7
0000aa  f7ff ffa9                   BL       mergesort
;;;133    	return count;
0000ae  1c38                        MOV      r0,r7
0000b0  b040                        ADD      sp,#&100
0000b2  bc90                        POP      {r4,r7}
0000b4  bc08                        POP      {r3}
0000b6  4718                        BX       r3
                            F2L1
0000b8  00000000                    DCD      |x$dataseg|

;;;134    }
;;;135    int skipandget(int skipnum, char *filename)
;;;136    {
0000bc                      skipandget
0000bc  b5b0                        PUSH     {r4,r5,r7,lr}
;;;137    	int i;
;;;138    	int type;
;;;139    	type=getvalidfile(1,filename);
0000be  1c04                        MOV      r4,r0
0000c0  2001                        MOV      r0,#1
0000c2  1c0f                        MOV      r7,r1
0000c4  f7ff ff9c                   BL       getvalidfile
;;;140    	for (i=0;i<skipnum;i++)
0000c8  2500                        MOV      r5,#0
0000ca  e004                        B        F3L12
                            F3L4
;;;141    	{
;;;142    		type=getvalidfile(0,filename);
0000cc  2000                        MOV      r0,#0
0000ce  1c39                        MOV      r1,r7
0000d0  f7ff ff96                   BL       getvalidfile
0000d4  3501                        ADD      r5,#1   ;;;140
                            F3L12
0000d6  42a5                        CMP      r5,r4   ;;;140
0000d8  dbf8                        BLT      F3L4   ;;;140
0000da  bcb0                        POP      {r4,r5,r7}   ;;;140
0000dc  bc08                        POP      {r3}   ;;;140
0000de  4718                        BX       r3   ;;;140

;;;143    	}
;;;144    	return type;
;;;145    }
;;;146    
;;;147    bool remove_from_string(char *string, int pos, int count)
;;;148    {
0000e0                      remove_from_string
0000e0  b5b0                        PUSH     {r4,r5,r7,lr}
;;;149    	int l=strlen(string);
0000e2  1c0c                        MOV      r4,r1
0000e4  1c05                        MOV      r5,r0
0000e6  1c17                        MOV      r7,r2
0000e8  f7ff ff8a                   BL       strlen
;;;150    	if (pos<0)
0000ec  2c00                        CMP      r4,#0
0000ee  da01                        BGE      F4L14
;;;151    	{
;;;152    		count+=pos;
0000f0  193f                        ADD      r7,r4
;;;153    		pos=0;
0000f2  2400                        MOV      r4,#0
                            F4L14
;;;154    	}
;;;155    	if (count+pos>=l) count=l-pos;
0000f4  1939                        ADD      r1,r7,r4
0000f6  4281                        CMP      r1,r0
0000f8  db00                        BLT      F4L15
0000fa  1b07                        SUB      r7,r0,r4
                            F4L15
;;;156    	if (count<0)
0000fc  2f00                        CMP      r7,#0
0000fe  da03                        BGE      F4L16
;;;157    	{
;;;158    		return false;
000100  2000                        MOV      r0,#0
                            F4L12
000102  bcb0                        POP      {r4,r5,r7}
000104  bc08                        POP      {r3}
000106  4718                        BX       r3
                            F4L16
;;;159    	}
;;;160    	memmove(string+pos,string+pos+count,l-count-pos+1);
000108  1bc0                        SUB      r0,r7
00010a  1b00                        SUB      r0,r4
00010c  1c42                        ADD      r2,r0,#1
00010e  1928                        ADD      r0,r5,r4
000110  19c1                        ADD      r1,r0,r7
000112  f7ff ff75                   BL       memmove
;;;161    	return true;
000116  2001                        MOV      r0,#1
000118  e7f3                        B        F4L12

;;;162    }
;;;163    bool insert_into_string(char *string, int pos, const char *insertthis)
;;;164    {
00011a                      insert_into_string
00011a  b5f0                        PUSH     {r4-r7,lr}
;;;165    	int l2=strlen(insertthis);
00011c  1c05                        MOV      r5,r0
00011e  1c10                        MOV      r0,r2
000120  1c0c                        MOV      r4,r1
000122  1c17                        MOV      r7,r2
000124  f7ff ff6c                   BL       strlen
;;;166    	int l=strlen(string);
000128  1c06                        MOV      r6,r0
00012a  1c28                        MOV      r0,r5
00012c  f7ff ff68                   BL       strlen
;;;167    	memmove(string+pos+l2,string+pos,l-pos+1);
000130  1b00                        SUB      r0,r4
000132  1c42                        ADD      r2,r0,#1
000134  1929                        ADD      r1,r5,r4
000136  1988                        ADD      r0,r1,r6
000138  1c0c                        MOV      r4,r1
00013a  f7ff ff61                   BL       memmove
;;;168    	memcpy(string+pos,insertthis,l2);
00013e  1c20                        MOV      r0,r4
000140  1c39                        MOV      r1,r7
000142  1c32                        MOV      r2,r6
000144  f7ff ff5c                   BL       memcpy
;;;169    	return true;
000148  bcf0                        POP      {r4-r7}
00014a  bc08                        POP      {r3}
00014c  2001                        MOV      r0,#1
00014e  4718                        BX       r3

;;;170    }
;;;171    
;;;172    bool remove_string(char *string, const char *removethis)
;;;173    {
000150                      remove_string
000150  b5b0                        PUSH     {r4,r5,r7,lr}
;;;174    	char *p=strstr(string,removethis);
000152  1c0c                        MOV      r4,r1
000154  1c07                        MOV      r7,r0
000156  f7ff ff53                   BL       strstr
;;;175    	int l2=strlen(removethis);
00015a  1c05                        MOV      r5,r0
00015c  1c20                        MOV      r0,r4
00015e  f7ff ff4f                   BL       strlen
;;;176    	if (p)
000162  2d00                        CMP      r5,#0
000164  d008                        BEQ      F6L10
;;;177    	{
;;;178    		remove_from_string(string,p-string,l2);
000166  1be9                        SUB      r1,r5,r7
000168  1c02                        MOV      r2,r0
00016a  1c38                        MOV      r0,r7
00016c  f7ff ffb8                   BL       remove_from_string
;;;179    		return true;
000170  2001                        MOV      r0,#1
                            F6L8
000172  bcb0                        POP      {r4,r5,r7}
000174  bc08                        POP      {r3}
000176  4718                        BX       r3
                            F6L10
;;;180    	}
;;;181    	return false;
000178  2000                        MOV      r0,#0
00017a  e7fa                        B        F6L8

;;;182    }
;;;183    bool search_replace(char *string, const char *replacethis, const char *withthis)
;;;184    {
00017c                      search_replace
00017c  b5f0                        PUSH     {r4-r7,lr}
;;;185    	char *p = strstr(string,replacethis);
00017e  1c0c                        MOV      r4,r1
000180  1c15                        MOV      r5,r2
000182  1c07                        MOV      r7,r0
000184  f7ff ff3c                   BL       strstr
;;;186    	int l2=strlen(replacethis);
000188  1c06                        MOV      r6,r0
00018a  1c20                        MOV      r0,r4
00018c  f7ff ff38                   BL       strlen
;;;187    	if (p)
000190  2e00                        CMP      r6,#0
000192  d00e                        BEQ      F7L10
;;;188    	{
;;;189    		remove_from_string(string,p-string,l2);
000194  1c02                        MOV      r2,r0
000196  1c38                        MOV      r0,r7
000198  1bf1                        SUB      r1,r6,r7
00019a  1c0c                        MOV      r4,r1
00019c  f7ff ffa0                   BL       remove_from_string
;;;190    		insert_into_string(string,p-string,withthis);
0001a0  1c38                        MOV      r0,r7
0001a2  1c21                        MOV      r1,r4
0001a4  1c2a                        MOV      r2,r5
0001a6  f7ff ffb8                   BL       insert_into_string
;;;191    		return true;
0001aa  2001                        MOV      r0,#1
                            F7L8
0001ac  bcf0                        POP      {r4-r7}
0001ae  bc08                        POP      {r3}
0001b0  4718                        BX       r3
                            F7L10
;;;192    	}
;;;193    	return false;
0001b2  2000                        MOV      r0,#0
0001b4  e7fa                        B        F7L8

0001b6  005d215b                    DCB      DCB      "[!]\0"   ;;;193
0001ba  005d435b                    DCB      DCB      "[C]\0"   ;;;193
0001be  005d535b                    DCB      DCB      "[S]\0"   ;;;193
0001c2  45554a28                    DCB      DCB      "(JUE"   ;;;193
0001c6  00000029                    DCB      DCB      ")\0\0\0"   ;;;193
0001ca  29455528                    DCB      DCB      "(UE)"   ;;;193
0001ce  00000000                    DCB      DCB      "\0\0\0\0"   ;;;193
0001d2  29554a28                    DCB      DCB      "(JU)"   ;;;193
0001d6  00000000                    DCB      DCB      "\0\0\0\0"   ;;;193
0001da  00295528                    DCB      DCB      "(U)\0"   ;;;193
0001de  00294a28                    DCB      DCB      "(J)\0"   ;;;193
0001e2  00294528                    DCB      DCB      "(E)\0"   ;;;193
0001e6  42475328                    DCB      DCB      "(SGB"   ;;;193
0001ea  00000029                    DCB      DCB      ")\0\0\0"   ;;;193
0001ee  70614a28                    DCB      DCB      "(Jap"   ;;;193
0001f2  73656e61                    DCB      DCB      "anes"   ;;;193
0001f6  00002965                    DCB      DCB      "e)\0\0"   ;;;193
0001fa  6c6e5528                    DCB      DCB      "(Unl"   ;;;193
0001fe  00000029                    DCB      DCB      ")\0\0\0"   ;;;193
000202  00294628                    DCB      DCB      "(F)\0"   ;;;193
000206  00294728                    DCB      DCB      "(G)\0"   ;;;193
00020a  29415528                    DCB      DCB      "(UA)"   ;;;193
00020e  00000000                    DCB      DCB      "\0\0\0\0"   ;;;193
000212  00295328                    DCB      DCB      "(S)\0"   ;;;193
000216  00294928                    DCB      DCB      "(I)\0"   ;;;193
00021a  69684328                    DCB      DCB      "(Chi"   ;;;193
00021e  6573656e                    DCB      DCB      "nese"   ;;;193
000222  00000029                    DCB      DCB      ")\0\0\0"   ;;;193
000226  41554a28                    DCB      DCB      "(JUA"   ;;;193
00022a  00000029                    DCB      DCB      ")\0\0\0"   ;;;193

;;;194    }
;;;195    
;;;196    char *const taglist[]={"[!]","[C]","[S]","(JUE)","(UE)","(JU)","(U)","(J)","(E)","(SGB)","(Japanese)","(Unl)","(F)","(G)","(UA)","(S)","(I)","(Chinese)","(JUA)"};
;;;197    const int NUM_TAGS=19;
;;;198    
;;;199    void fixfilename(int type, char *filename)
;;;200    {
00022e                      fixfilename
00022e  b5f0                        PUSH     {r4-r7,lr}
;;;201    	int l;
;;;202    	int end;
;;;203    	int i;
;;;204    	for (i=0;i<NUM_TAGS;i++)
000230  2500                        MOV      r5,#0
000232  1c04                        MOV      r4,r0
000234  1c0f                        MOV      r7,r1
000236  e008                        B        F8L35
                            F8L27
000238  00ae                        LSL      r6,r5,#2
                            F8L7
;;;205    	{
;;;206    		while(remove_string(filename,taglist[i]));
00023a  4821                        LDR      r0,F8L1
00023c  5981                        LDR      r1,[r0,r6]
00023e  1c38                        MOV      r0,r7
000240  f7ff ff86                   BL       remove_string
000244  2800                        CMP      r0,#0
000246  d1f8                        BNE      F8L7
000248  3501                        ADD      r5,#1   ;;;204
                            F8L35
00024a  2d13                        CMP      r5,#&13   ;;;204
00024c  dbf4                        BLT      F8L27   ;;;204
                            F8L11
;;;207    	}
;;;208    	while (search_replace(filename," .","."));  //remove trailing spaces
00024e  1c38                        MOV      r0,r7
000250  a21c                        ADR      r2,F8L1+4
000252  a11d                        ADR      r1,F8L1+8
000254  f7ff ff92                   BL       search_replace
000258  2800                        CMP      r0,#0
00025a  d1f8                        BNE      F8L11
;;;209    	l=strlen(filename);
00025c  1c38                        MOV      r0,r7
00025e  f7ff fecf                   BL       strlen
000262  2100                        MOV      r1,#0
;;;210    
;;;211    	if (type==2) //directory
000264  2c02                        CMP      r4,#2
000266  d114                        BNE      F8L36
;;;212    	{
;;;213    		end=l-1;
;;;214    		if (end>26) end=26;
000268  1e42                        SUB      r2,r0,#1
00026a  2a1a                        CMP      r2,#&1a
00026c  dd00                        BLE      F8L37
00026e  221a                        MOV      r2,#&1a
                            F8L37
;;;215    		for (i=end;i>=0;i--)
000270  1c10                        MOV      r0,r2
000272  e003                        B        F8L38
                            F8L17
;;;216    		{
;;;217    			filename[i+1]=filename[i];
000274  5c3b                        LDRB     r3,[r7,r0]
000276  183c                        ADD      r4,r7,r0
000278  3801                        SUB      r0,#1   ;;;215
00027a  7063                        STRB     r3,[r4,#1]
                            F8L38
00027c  2800                        CMP      r0,#0   ;;;215
00027e  daf9                        BGE      F8L17   ;;;215
;;;218    		}
;;;219    		filename[0]='[';
000280  205b                        MOV      r0,#&5b
000282  7038                        STRB     r0,[r7,#0]
;;;220    		filename[end+2]=']';
000284  205d                        MOV      r0,#&5d
000286  18ba                        ADD      r2,r7,r2
000288  7090                        STRB     r0,[r2,#2]
;;;221    		filename[end+3]='\0';
00028a  70d1                        STRB     r1,[r2,#3]
                            F8L33
00028c  bcf0                        POP      {r4-r7}
00028e  bc08                        POP      {r3}
000290  4718                        BX       r3
                            F8L36
;;;222    	}
;;;223    	else if (type==1)
000292  2c01                        CMP      r4,#1
000294  d1fa                        BNE      F8L33
;;;224    	{
;;;225    		if (filename[l-4]!='.') l++;
000296  183a                        ADD      r2,r7,r0
000298  3a10                        SUB      r2,#&10
00029a  7b12                        LDRB     r2,[r2,#&c]
00029c  2a2e                        CMP      r2,#&2e
00029e  d000                        BEQ      F8L39
0002a0  3001                        ADD      r0,#1
                            F8L39
;;;226    		filename[l-4]='\0';
0002a2  183a                        ADD      r2,r7,r0
0002a4  3a10                        SUB      r2,#&10
0002a6  7311                        STRB     r1,[r2,#&c]
;;;227    		l-=4;
;;;228    		end=l-1;
0002a8  3804                        SUB      r0,#4
;;;229    		if (end>=27)
0002aa  1e42                        SUB      r2,r0,#1
0002ac  2a1b                        CMP      r2,#&1b
0002ae  dbed                        BLT      F8L33
;;;230    		{
;;;231    			filename[27]=filename[l-1];
0002b0  183a                        ADD      r2,r7,r0
0002b2  3a10                        SUB      r2,#&10
0002b4  7bd2                        LDRB     r2,[r2,#&f]
0002b6  76fa                        STRB     r2,[r7,#&1b]
;;;232    			filename[28]=filename[l];
0002b8  5c38                        LDRB     r0,[r7,r0]
0002ba  7738                        STRB     r0,[r7,#&1c]
;;;233    			filename[29]='\0';
0002bc  7779                        STRB     r1,[r7,#&1d]
0002be  e7e5                        B        F8L33
                            F8L1
0002c0  00000000                    DCD      |x$constdata|
0002c4  0000002e                    DCB      DCB      ".\0\0\0"
0002c8  00002e20                    DCB      DCB      " .\0\0"

;;;234    		}
;;;235    	}
;;;236    }
;;;237    
;;;238    void drawcfmenu(int sel, int count)
;;;239    {
0002cc                      drawcfmenu
0002cc  b5f0                        PUSH     {r4-r7,lr}
;;;240    	int selrow;
;;;241    	int top;
;;;242    	int row=0;
0002ce  2500                        MOV      r5,#0
;;;243    	//0...9                top
;;;244    	//10...count-9         scroll
;;;245    	//count-9...count-1    bottom
;;;246    	top=sel-10;
;;;247    	if (top<0 || count <=19)
0002d0  1c0f                        MOV      r7,r1
0002d2  1fc4                        SUB      r4,r0,#7
0002d4  3c03                        SUB      r4,#3
0002d6  d401                        BMI      F9L25
0002d8  2f13                        CMP      r7,#&13
0002da  dc01                        BGT      F9L26
                            F9L25
;;;248    	{
;;;249    		top=0;
0002dc  2400                        MOV      r4,#0
0002de  e004                        B        F9L27
                            F9L26
;;;250    	}
;;;251    	else if (count-20<=top)
0002e0  1ff9                        SUB      r1,r7,#7
0002e2  390d                        SUB      r1,#&d
0002e4  42a1                        CMP      r1,r4
0002e6  dc00                        BGT      F9L27
;;;252    	{
;;;253    		top=count-20;
0002e8  1c0c                        MOV      r4,r1
                            F9L27
;;;254    	}
;;;255    	selrow=sel-top;
0002ea  1b06                        SUB      r6,r0,r4
;;;256    	waitframe();
0002ec  f7ff fe88                   BL       waitframe
;;;257    	cls(1);
0002f0  2001                        MOV      r0,#1
0002f2  f7ff fe85                   BL       cls
                            F9L11
;;;258    	while (1)
;;;259    	{
;;;260    		if (row>=20)
0002f6  2d14                        CMP      r5,#&14
0002f8  da12                        BGE      F9L28
;;;261    			return;
;;;262    		if (row+top>=count)
0002fa  1928                        ADD      r0,r5,r4
0002fc  42b8                        CMP      r0,r7
0002fe  da0f                        BGE      F9L28
;;;263    			return;
;;;264    		drawtext(row,FILES[DATA[row+top]],row==selrow);
000300  2201                        MOV      r2,#1
000302  42b5                        CMP      r5,r6
000304  d000                        BEQ      F9L29
000306  2200                        MOV      r2,#0
                            F9L29
000308  4907                        LDR      r1,F9L1
00030a  0040                        LSL      r0,#1
00030c  684b                        LDR      r3,[r1,#4]
00030e  5a18                        LDRH     r0,[r3,r0]
000310  6809                        LDR      r1,[r1,#0]
000312  0140                        LSL      r0,#5
000314  1841                        ADD      r1,r0,r1
000316  1c28                        MOV      r0,r5
000318  f7ff fe72                   BL       drawtext
;;;265    		row++;
00031c  3501                        ADD      r5,#1
00031e  e7ea                        B        F9L11
                            F9L28
000320  bcf0                        POP      {r4-r7}
000322  bc08                        POP      {r3}
000324  4718                        BX       r3
000326  0000                        LSL      r0,#0
                            F9L1
000328  00000000                    DCD      |x$dataseg|

;;;266    	}
;;;267    }
;;;268    
;;;269    void copy_to_right_screen()
;;;270    {
00032c                      copy_to_right_screen
00032c  b490                        PUSH     {r4,r7}
;;;271    	//SCREENBASE+2048
;;;272    	int i;
;;;273    	u16 *screen=SCREENBASE;
;;;274    	for (i=0;i<1024;i++)
00032e  2000                        MOV      r0,#0
000330  2201                        MOV      r2,#1
000332  4907                        LDR      r1,F10L1   ;;;273
000334  0292                        LSL      r2,#10
                            F10L4
;;;275    	{
;;;276    		screen[i+1024]=screen[i];
000336  0043                        LSL      r3,r0,#1
000338  5acf                        LDRH     r7,[r1,r3]
00033a  185c                        ADD      r4,r3,r1
00033c  2301                        MOV      r3,#1
00033e  02db                        LSL      r3,#11
000340  18e3                        ADD      r3,r4,r3
000342  3001                        ADD      r0,#1   ;;;274
000344  4290                        CMP      r0,r2   ;;;274
000346  801f                        STRH     r7,[r3,#0]
000348  dbf5                        BLT      F10L4   ;;;274
00034a  bc90                        POP      {r4,r7}   ;;;274
00034c  4770                        BX       lr   ;;;274
00034e  0000                        LSL      r0,#0   ;;;274
                            F10L1
000350  0600d000                    DCD      0x0600d000   ;;;274

;;;277    	}
;;;278    }
;;;279    
;;;280    void scroll_left(int selected, int count)
;;;281    {
000354                      scroll_left
000354  b5f0                        PUSH     {r4-r7,lr}
;;;282    	int i;
;;;283    	copy_to_right_screen();
000356  1c04                        MOV      r4,r0
000358  1c0f                        MOV      r7,r1
00035a  f7ff ffe7                   BL       copy_to_right_screen
;;;284    	ui_x=256;
00035e  26ff                        MOV      r6,#&ff
000360  4d0a                        LDR      r5,F11L1
000362  3601                        ADD      r6,#1
;;;285    	move_ui();
000364  602e                        STR      r6,[r5,#0]
000366  f7ff fe4b                   BL       move_ui
;;;286    	drawcfmenu(selected, count);
00036a  1c20                        MOV      r0,r4
00036c  1c39                        MOV      r1,r7
00036e  f7ff ffad                   BL       drawcfmenu
;;;287    	for (i=32;i<=256;i+=32)
000372  2720                        MOV      r7,#&20
                            F11L4
;;;288    	{
;;;289    		waitframe();
000374  f7ff fe44                   BL       waitframe
;;;290    		ui_x=256-i;
000378  1bf0                        SUB      r0,r6,r7
;;;291    		move_ui();
00037a  6028                        STR      r0,[r5,#0]
00037c  f7ff fe40                   BL       move_ui
000380  3720                        ADD      r7,#&20   ;;;287
000382  42b7                        CMP      r7,r6   ;;;287
000384  ddf6                        BLE      F11L4   ;;;287
000386  bcf0                        POP      {r4-r7}   ;;;287
000388  bc08                        POP      {r3}   ;;;287
00038a  4718                        BX       r3   ;;;287
                            F11L1
00038c  00000000                    DCD      ui_x   ;;;287

;;;292    	}
;;;293    }
;;;294    
;;;295    void scroll_right(int selected, int count)
;;;296    {
000390                      scroll_right
000390  b5f0                        PUSH     {r4-r7,lr}
;;;297    	int i;
;;;298    	copy_to_right_screen();
000392  1c04                        MOV      r4,r0
000394  1c0f                        MOV      r7,r1
000396  f7ff ffc9                   BL       copy_to_right_screen
;;;299    	ui_x=256;
00039a  26ff                        MOV      r6,#&ff
00039c  4d0d                        LDR      r5,F12L1
00039e  3601                        ADD      r6,#1
;;;300    	move_ui();
0003a0  602e                        STR      r6,[r5,#0]
0003a2  f7ff fe2d                   BL       move_ui
;;;301    	drawcfmenu(selected, count);
0003a6  1c20                        MOV      r0,r4
0003a8  1c39                        MOV      r1,r7
0003aa  f7ff ff8f                   BL       drawcfmenu
;;;302    	for (i=32;i<=256;i+=32)
0003ae  2720                        MOV      r7,#&20
                            F12L4
;;;303    	{
;;;304    		waitframe();
0003b0  f7ff fe26                   BL       waitframe
;;;305    		ui_x=256+i;
;;;306    		move_ui();
0003b4  1df8                        ADD      r0,r7,#7
0003b6  30f9                        ADD      r0,#&f9
0003b8  6028                        STR      r0,[r5,#0]
0003ba  f7ff fe21                   BL       move_ui
0003be  3720                        ADD      r7,#&20   ;;;302
0003c0  42b7                        CMP      r7,r6   ;;;302
0003c2  ddf5                        BLE      F12L4   ;;;302
;;;307    	}
;;;308    	ui_x=0;
0003c4  2000                        MOV      r0,#0
;;;309    	move_ui();
0003c6  6028                        STR      r0,[r5,#0]
0003c8  f7ff fe1a                   BL       move_ui
0003cc  bcf0                        POP      {r4-r7}
0003ce  bc08                        POP      {r3}
0003d0  4718                        BX       r3
0003d2  0000                        LSL      r0,#0
                            F12L1
0003d4  00000000                    DCD      ui_x

;;;310    }
;;;311    
;;;312    
;;;313    void generate_sram_name(char *filename)
;;;314    {
0003d8                      generate_sram_name
0003d8  b580                        PUSH     {r7,lr}
;;;315    	//generate sram name
;;;316    	{
;;;317    //		char *ext=strrchr(filename,'.');
;;;318    		int l=strlen(filename);
0003da  1c07                        MOV      r7,r0
0003dc  f7ff fe10                   BL       strlen
;;;319    //		if (ext)
;;;320    //		{
;;;321    //			ext++;
;;;322    //			strcpy(ext,"sav");
;;;323    			
;;;324    		if (filename[l-3]=='.') l++;
0003e0  1839                        ADD      r1,r7,r0
0003e2  3910                        SUB      r1,#&10
0003e4  7b49                        LDRB     r1,[r1,#&d]
0003e6  292e                        CMP      r1,#&2e
0003e8  d100                        BNE      F13L12
0003ea  3001                        ADD      r0,#1
                            F13L12
;;;325    		filename[l-3]='s';
0003ec  1839                        ADD      r1,r7,r0
0003ee  3910                        SUB      r1,#&10
0003f0  2273                        MOV      r2,#&73
0003f2  734a                        STRB     r2,[r1,#&d]
;;;326    		filename[l-2]='a';
0003f4  2261                        MOV      r2,#&61
0003f6  738a                        STRB     r2,[r1,#&e]
;;;327    		filename[l-1]='v';
0003f8  2276                        MOV      r2,#&76
;;;328    		if (l>=256)l=255;
0003fa  23ff                        MOV      r3,#&ff
0003fc  3301                        ADD      r3,#1
0003fe  4298                        CMP      r0,r3
000400  73ca                        STRB     r2,[r1,#&f]   ;;;327
000402  db00                        BLT      F13L13
000404  20ff                        MOV      r0,#&ff
                            F13L13
;;;329    		filename[l]=0;
000406  2100                        MOV      r1,#0
000408  5439                        STRB     r1,[r7,r0]
;;;330    		memcpy(SramName,filename,256);
00040a  1c39                        MOV      r1,r7
00040c  22ff                        MOV      r2,#&ff
00040e  3201                        ADD      r2,#1
000410  4802                        LDR      r0,F13L1
000412  f7ff fdf5                   BL       memcpy
000416  bc80                        POP      {r7}
000418  bc08                        POP      {r3}
00041a  4718                        BX       r3
                            F13L1
00041c  00000000                    DCD      SramName

;;;331    	}
;;;332    }
;;;333    
;;;334    int execute(int sel, File *retfile)
;;;335    {
000420                      execute
000420  b5f0                        PUSH     {r4-r7,lr}
000422  b0c0                        SUB      sp,#&100
;;;336    	int type;
;;;337    	File file;
;;;338    	int filesize;
;;;339    	const int sizelimit=128*1024;
;;;340    	u8* dest=(u8*)&Image$$RO$$Limit;
000424  1c0c                        MOV      r4,r1
;;;341    	char filename[256];
;;;342    	
;;;343    	type=skipandget(sel,filename);
000426  4669                        MOV      r1,sp
000428  4d1e                        LDR      r5,F14L1   ;;;340
00042a  f7ff fe47                   BL       skipandget
;;;344    	if (type==2)
00042e  2802                        CMP      r0,#2
000430  d104                        BNE      F14L20
;;;345    	{
;;;346    		FAT_chdir(filename);
000432  4668                        MOV      r0,sp
000434  f7ff fde4                   BL       FAT_CWD
;;;347    		return 2;
000438  2002                        MOV      r0,#2
00043a  e02e                        B        F14L21
                            F14L20
00043c  2600                        MOV      r6,#0
;;;348    	}
;;;349    	else if (type==1)
00043e  2801                        CMP      r0,#1
000440  d12a                        BNE      F14L22
;;;350    	{
;;;351    		file=FAT_fopen(filename,"r");
000442  4668                        MOV      r0,sp
000444  a118                        ADR      r1,F14L1+4
000446  f7ff fddb                   BL       FAT_fopen
;;;352    		if (file==NO_FILE) return 1;
00044a  2301                        MOV      r3,#1
00044c  1c07                        MOV      r7,r0
00044e  42d8                        CMN      r0,r3
000450  d101                        BNE      F14L23
000452  2001                        MOV      r0,#1
000454  e021                        B        F14L21
                            F14L23
;;;353    
;;;354    		filesize=FAT_GetFileSize();
000456  f7ff fdd3                   BL       FAT_GetFileSize
;;;355    		textstart=dest;
00045a  4914                        LDR      r1,F14L1+8
;;;356    
;;;357    		if (filesize<=sizelimit) //128k and under?  Load full rom.
00045c  600d                        STR      r5,[r1,#0]
00045e  2101                        MOV      r1,#1
000460  0449                        LSL      r1,#17
000462  4288                        CMP      r0,r1
000464  dc08                        BGT      F14L24
;;;358    		{
;;;359    			FAT_fread(dest,1,filesize,file);
000466  1c02                        MOV      r2,r0
000468  1c28                        MOV      r0,r5
00046a  2101                        MOV      r1,#1
00046c  1c3b                        MOV      r3,r7
00046e  f7ff fdc7                   BL       FAT_fread
;;;360    			usingcache=0;
000472  480f                        LDR      r0,F14L1+12
000474  6006                        STR      r6,[r0,#0]
000476  e009                        B        F14L25
                            F14L24
;;;361    		}
;;;362    		else
;;;363    		{
;;;364    			int readsize;
;;;365    			readsize=16384;
000478  2201                        MOV      r2,#1
00047a  0392                        LSL      r2,#14
;;;366    			FAT_fread(dest,1,readsize,file);
00047c  2101                        MOV      r1,#1
00047e  1c28                        MOV      r0,r5
000480  1c3b                        MOV      r3,r7
000482  f7ff fdbd                   BL       FAT_fread
;;;367    			usingcache=1;
000486  490a                        LDR      r1,F14L1+12
000488  2001                        MOV      r0,#1
00048a  6008                        STR      r0,[r1,#0]
                            F14L25
;;;368    		}
;;;369    		//generate sram name
;;;370    		generate_sram_name(filename);
00048c  4668                        MOV      r0,sp
00048e  f7ff ffa3                   BL       generate_sram_name
;;;371    		//find the save slots
;;;372    //		find_save_slots(filename);
;;;373    
;;;374    		*retfile=file;
;;;375    		return 3;
000492  2003                        MOV      r0,#3
000494  6027                        STR      r7,[r4,#0]
000496  e000                        B        F14L21
                            F14L22
;;;376    	}
;;;377    	else
;;;378    	{
;;;379    		return 0;
000498  1c30                        MOV      r0,r6
                            F14L21
00049a  b040                        ADD      sp,#&100
00049c  bcf0                        POP      {r4-r7}
00049e  bc08                        POP      {r3}
0004a0  4718                        BX       r3
0004a2  0000                        LSL      r0,#0
                            F14L1
0004a4  00000000                    DCD      |Image$$RO$$Limit|
0004a8  00000072                    DCB      DCB      "r\0\0\0"
0004ac  00000000                    DCD      textstart
0004b0  00000000                    DCD      usingcache

;;;380    	}
;;;381    }
;;;382    
;;;383    File cfmenu(void)
;;;384    {
0004b4                      cfmenu
0004b4  b5f8                        PUSH     {r3-r7,lr}
;;;385    	//int cursor=0;
;;;386    	int count=0;
;;;387    	int type;
;;;388    	int i;
;;;389    	File file;
;;;390    	u32 key;
;;;391    	bool success;
;;;392    	static int needsinit=1;
;;;393    	selected=0;
0004b6  2600                        MOV      r6,#0
0004b8  4c41                        LDR      r4,F15L1
;;;394    	cls(3);
0004ba  2003                        MOV      r0,#3
0004bc  6026                        STR      r6,[r4,#0]
0004be  f7ff fd9f                   BL       cls
;;;395    	
;;;396    	ui_x=0;
0004c2  4d40                        LDR      r5,F15L1+4
;;;397    	move_ui();
0004c4  602e                        STR      r6,[r5,#0]
0004c6  f7ff fd9b                   BL       move_ui
;;;398    	
;;;399    	success=true;
;;;400    	if (needsinit)
0004ca  493f                        LDR      r1,F15L1+8
0004cc  68c8                        LDR      r0,[r1,#&c]
0004ce  2800                        CMP      r0,#0
0004d0  d026                        BEQ      F15L38
;;;401    	{
;;;402    		success=FAT_InitFiles(); //don't need to init multiple times
0004d2  f7ff fd95                   BL       FAT_InitFiles
;;;403    		needsinit=0;
0004d6  493c                        LDR      r1,F15L1+8
;;;404    	}
;;;405    	else
;;;406    	{
;;;407    		selected=selectedrom;
;;;408    	}
;;;409    	if (success)
0004d8  2800                        CMP      r0,#0
0004da  60ce                        STR      r6,[r1,#&c]
0004dc  d067                        BEQ      F15L39
                            F15L8
;;;410    	{
;;;411    		ui_x=255;
0004de  20ff                        MOV      r0,#&ff
;;;412    		move_ui();
0004e0  6028                        STR      r0,[r5,#0]
0004e2  f7ff fd8d                   BL       move_ui
;;;413    		oldinput=AGBinput=~REG_P1;
0004e6  4839                        LDR      r0,F15L1+12
0004e8  4939                        LDR      r1,F15L1+16
0004ea  8a00                        LDRH     r0,[r0,#&10]
0004ec  43c0                        MVN      r0,r0
0004ee  6008                        STR      r0,[r1,#0]
0004f0  4938                        LDR      r1,F15L1+20
;;;414    		count=buildfiles();
0004f2  6008                        STR      r0,[r1,#0]
0004f4  f7ff fdba                   BL       buildfiles
;;;415    		drawcfmenu(selected,count);
0004f8  1c01                        MOV      r1,r0
0004fa  4c31                        LDR      r4,F15L1
0004fc  1c07                        MOV      r7,r0
0004fe  6820                        LDR      r0,[r4,#0]
000500  f7ff fee4                   BL       drawcfmenu
;;;416    
;;;417    		for(i=0;i<8;i++)
000504  2400                        MOV      r4,#0
                            F15L9
;;;418    		{
;;;419    			waitframe();
000506  f7ff fd7b                   BL       waitframe
;;;420    			ui_x=224-i*32;
00050a  0160                        LSL      r0,r4,#5
00050c  21e0                        MOV      r1,#&e0
00050e  1a08                        SUB      r0,r1,r0
;;;421    			move_ui();
000510  6028                        STR      r0,[r5,#0]
000512  f7ff fd75                   BL       move_ui
000516  3401                        ADD      r4,#1   ;;;417
000518  2c08                        CMP      r4,#8   ;;;417
00051a  dbf4                        BLT      F15L9   ;;;417
00051c  4e28                        LDR      r6,F15L1   ;;;417
00051e  e003                        B        F15L40   ;;;417
                            F15L38
000520  482d                        LDR      r0,F15L1+24   ;;;407
000522  6800                        LDR      r0,[r0,#0]   ;;;407
000524  6020                        STR      r0,[r4,#0]   ;;;407
000526  e7da                        B        F15L8   ;;;407
                            F15L40
                            F15L11
;;;422    		}
;;;423    
;;;424    		do
;;;425    		{
;;;426    			key=getmenuinput(count);
000528  1c38                        MOV      r0,r7
00052a  f7ff fd69                   BL       getmenuinput
;;;427    			if (key&A_BTN)
00052e  1c04                        MOV      r4,r0
000530  0840                        LSR      r0,#1
000532  d326                        BCC      F15L41
;;;428    			{
;;;429    				type=execute(DATA[selected], &file);
000534  4924                        LDR      r1,F15L1+8
000536  6830                        LDR      r0,[r6,#0]
000538  6849                        LDR      r1,[r1,#4]
00053a  0040                        LSL      r0,#1
00053c  5a08                        LDRH     r0,[r1,r0]
00053e  4669                        MOV      r1,sp
000540  f7ff ff6e                   BL       execute
;;;430    				if (type==3)
000544  2803                        CMP      r0,#3
000546  d112                        BNE      F15L42
;;;431    				{
;;;432    					for(i=1;i<9;i++)
000548  2701                        MOV      r7,#1
                            F15L16
;;;433    					{
;;;434    						waitframe();
00054a  f7ff fd59                   BL       waitframe
;;;435    						ui_x=i*32;
00054e  0178                        LSL      r0,r7,#5
;;;436    						move_ui();
000550  6028                        STR      r0,[r5,#0]
000552  f7ff fd55                   BL       move_ui
000556  3701                        ADD      r7,#1   ;;;432
000558  2f09                        CMP      r7,#9   ;;;432
00055a  dbf6                        BLT      F15L16   ;;;432
;;;437    					}
;;;438    					make_ui_invisible();
00055c  f7ff fd50                   BL       make_ui_invisible
;;;439    					selectedrom=selected;
000560  6830                        LDR      r0,[r6,#0]
000562  491d                        LDR      r1,F15L1+24
;;;440    					return file;
000564  6008                        STR      r0,[r1,#0]
000566  9800                        LDR      r0,[sp,#0]
000568  bcf8                        POP      {r3-r7}
00056a  bc08                        POP      {r3}
00056c  4718                        BX       r3
                            F15L42
;;;441    				}
;;;442    				else if (type==2)
00056e  2802                        CMP      r0,#2
000570  d107                        BNE      F15L43
;;;443    				{
;;;444    					count=buildfiles();
000572  f7ff fd7b                   BL       buildfiles
;;;445    					selected=0;
000576  1c07                        MOV      r7,r0
000578  2000                        MOV      r0,#0
;;;446    					scroll_right(selected,count);
00057a  6030                        STR      r0,[r6,#0]
00057c  1c39                        MOV      r1,r7
00057e  f7ff ff07                   BL       scroll_right
                            F15L41
                            F15L43
;;;447    				}
;;;448    			}
;;;449    			if (key&B_BTN)
000582  08a0                        LSR      r0,r4,#2
000584  d30c                        BCC      F15L44
;;;450    			{
;;;451    				if (FAT_chdir(".."))
000586  a015                        ADR      r0,F15L1+28
000588  f7ff fd3a                   BL       FAT_CWD
00058c  2800                        CMP      r0,#0
00058e  d007                        BEQ      F15L45
;;;452    				{
;;;453    					count=buildfiles();
000590  f7ff fd6c                   BL       buildfiles
;;;454    					selected=0;
000594  1c07                        MOV      r7,r0
000596  2000                        MOV      r0,#0
;;;455    					scroll_left(selected,count);
000598  6030                        STR      r0,[r6,#0]
00059a  1c39                        MOV      r1,r7
00059c  f7ff feda                   BL       scroll_left
                            F15L44
                            F15L45
;;;456    				}
;;;457    			}
;;;458    			if (key!=0)
0005a0  2c00                        CMP      r4,#0
0005a2  d0c1                        BEQ      F15L11
;;;459    			{
;;;460    				drawcfmenu(selected,count);
0005a4  6830                        LDR      r0,[r6,#0]
0005a6  1c39                        MOV      r1,r7
0005a8  f7ff fe90                   BL       drawcfmenu
0005ac  e7bc                        B        F15L11
                            F15L39
0005ae  e7ff                        B        F15L46
                            F15L46
;;;461    			}
;;;462    
;;;463    		} while(1);
;;;464    	}
;;;465    	else
;;;466    	{
;;;467    		drawtext(0,"CF Failed to init!",0);
0005b0  2200                        MOV      r2,#0
0005b2  2000                        MOV      r0,#0
0005b4  a10a                        ADR      r1,F15L1+32
0005b6  f7ff fd23                   BL       drawtext
0005ba  e7ff                        B        F15L47
                            F15L28
                            F15L47
0005bc  e7fe                        B        F15L28
0005be  0000                        LSL      r0,#0
                            F15L1
0005c0  00000000                    DCD      selected
0005c4  00000000                    DCD      ui_x
0005c8  00000000                    DCD      |x$dataseg|
0005cc  04000120                    DCD      0x04000120
0005d0  00000000                    DCD      AGBinput
0005d4  00000000                    DCD      oldinput
0005d8  00000000                    DCD      selectedrom
0005dc  00002e2e                    DCB      DCB      "..\0\0"
0005e0  46204643                    DCB      DCB      "CF F"
0005e4  656c6961                    DCB      DCB      "aile"
0005e8  6f742064                    DCB      DCB      "d to"
0005ec  696e6920                    DCB      DCB      " ini"
0005f0  00002174                    DCB      DCB      "t!\0\0"

;;;468    		while (1);
;;;469    	}
;;;470    	return 0;
;;;471    }
;;;472    
;;;473    
;;;474    
;;;475    int cistrcmp(const char *a, const char *b)
;;;476    {
0005f4                      cistrcmp
0005f4  b5b0                        PUSH     {r4,r5,r7,lr}
0005f6  1c0c                        MOV      r4,r1
0005f8  1c07                        MOV      r7,r0
                            F16L4
;;;477    	int diff;
;;;478    	do
;;;479    	{
;;;480    		diff=ucase(*((u8*)a))-ucase(*((u8*)b));
0005fa  7838                        LDRB     r0,[r7,#0]
0005fc  f7ff fd00                   BL       ucase
000600  1c05                        MOV      r5,r0
000602  7820                        LDRB     r0,[r4,#0]
000604  f7ff fcfc                   BL       ucase
000608  1a28                        SUB      r0,r5,r0
00060a  d102                        BNE      F16L14
;;;481    		if (diff!=0) return diff;
;;;482    		if (*a=='\0') return 0;
00060c  7838                        LDRB     r0,[r7,#0]
00060e  2800                        CMP      r0,#0
000610  d102                        BNE      F16L15
                            F16L14
000612  bcb0                        POP      {r4,r5,r7}
000614  bc08                        POP      {r3}
000616  4718                        BX       r3
                            F16L15
;;;483    		a++;
;;;484    		b++;
000618  3401                        ADD      r4,#1
00061a  3701                        ADD      r7,#1
00061c  e7ed                        B        F16L4

;;;485    	} while (1);
;;;486    }
;;;487    
;;;488    bool str_equiv(const char* str1, const char* str2)
;;;489    {
00061e                      str_equiv
00061e  b580                        PUSH     {r7,lr}
;;;490    	return cistrcmp(str1,str2)==0;
000620  2701                        MOV      r7,#1
000622  f7ff ffe7                   BL       cistrcmp
000626  2800                        CMP      r0,#0
000628  d000                        BEQ      F17L11
00062a  2700                        MOV      r7,#0
                            F17L11
00062c  1c38                        MOV      r0,r7
00062e  bc80                        POP      {r7}
000630  bc08                        POP      {r3}
000632  4718                        BX       r3

;;;491    }
;;;492    		
;;;493    
;;;494    //__inline bool lessthan (char files[][32], u16 a, u16 b)
;;;495    //{
;;;496    //	return strcmp(files[a],files[b])<=0;
;;;497    //}
;;;498    
;;;499    void mergesort (char files[][32], u16 data[], u16 temp[], int size)
;;;500    {
000634                      mergesort
000634  b5ff                        PUSH     {r0-r7,lr}
000636  b088                        SUB      sp,#&20
;;;501    	int i;
;;;502    	int a;
;;;503    	int a_end;
;;;504    	int b;
;;;505    	int b_end;
;;;506    	int c;
;;;507    	int step;
;;;508    	step=2;
000638  2002                        MOV      r0,#2
00063a  1c0f                        MOV      r7,r1
00063c  e050                        B        F18L42
                            F18L4
;;;509    	while(step/2<size)
;;;510    	{
;;;511    		for (i=0;i<size;i+=step)
00063e  2000                        MOV      r0,#0
000640  9003                        STR      r0,[sp,#&c]
000642  9800                        LDR      r0,[sp,#0]
000644  0042                        LSL      r2,r0,#1
000646  9207                        STR      r2,[sp,#&1c]
000648  e045                        B        F18L43
                            F18L6
;;;512    		{
;;;513    			a=i;
;;;514    			a_end=i+step/2;
00064a  9804                        LDR      r0,[sp,#&10]
00064c  9e03                        LDR      r6,[sp,#&c]
;;;515    			if (a_end>=size) break;
00064e  9b0b                        LDR      r3,[sp,#&2c]
000650  1980                        ADD      r0,r6   ;;;514
000652  9002                        STR      r0,[sp,#8]   ;;;514
000654  4298                        CMP      r0,r3
000656  da42                        BGE      F18L44
;;;516    			b=a_end;
;;;517    			b_end=i+step;
000658  9800                        LDR      r0,[sp,#0]
00065a  9c03                        LDR      r4,[sp,#&c]
;;;518    			if (b_end>size) b_end=size;
00065c  9b0b                        LDR      r3,[sp,#&2c]
00065e  1820                        ADD      r0,r4,r0   ;;;517
000660  9006                        STR      r0,[sp,#&18]   ;;;517
000662  9001                        STR      r0,[sp,#4]   ;;;517
000664  4298                        CMP      r0,r3
000666  9d02                        LDR      r5,[sp,#8]   ;;;517
000668  dd01                        BLE      F18L45
00066a  980b                        LDR      r0,[sp,#&2c]
00066c  9001                        STR      r0,[sp,#4]
                            F18L45
;;;519    			c=i;
00066e  9c03                        LDR      r4,[sp,#&c]
                            F18L15
;;;520    			while(1)
;;;521    			{
;;;522    				if (a==a_end)
000670  9802                        LDR      r0,[sp,#8]
000672  4286                        CMP      r6,r0
000674  d104                        BNE      F18L46
;;;523    				{
;;;524    					if (b==b_end)
000676  9801                        LDR      r0,[sp,#4]
000678  4285                        CMP      r5,r0
00067a  d022                        BEQ      F18L47
;;;525    					{
;;;526    						break;
;;;527    					}
;;;528    					temp[c]=data[b];
00067c  0068                        LSL      r0,r5,#1
00067e  e019                        B        F18L48
                            F18L46
;;;529    					c++;
;;;530    					b++;
;;;531    				}
;;;532    				else if (b==b_end)
000680  9801                        LDR      r0,[sp,#4]
000682  4285                        CMP      r5,r0
000684  d00d                        BEQ      F18L49
;;;533    				{
;;;534    					temp[c]=data[a];
;;;535    					c++;
;;;536    					a++;
;;;537    				}
;;;538    				else
;;;539    				{
;;;540    					if ( cistrcmp(files[data[a]],files[data[b]])<=0 )
000686  0068                        LSL      r0,r5,#1
000688  9005                        STR      r0,[sp,#&14]
00068a  5a38                        LDRH     r0,[r7,r0]
00068c  9a08                        LDR      r2,[sp,#&20]
00068e  0140                        LSL      r0,#5
000690  1881                        ADD      r1,r0,r2
000692  0070                        LSL      r0,r6,#1
000694  5a38                        LDRH     r0,[r7,r0]
000696  0140                        LSL      r0,#5
000698  1880                        ADD      r0,r2
00069a  f7ff ffab                   BL       cistrcmp
00069e  2800                        CMP      r0,#0
0006a0  dc07                        BGT      F18L50
                            F18L49
;;;541    					{
;;;542    						temp[c]=data[a];
0006a2  0070                        LSL      r0,r6,#1
0006a4  5a38                        LDRH     r0,[r7,r0]
0006a6  0061                        LSL      r1,r4,#1
0006a8  9a0a                        LDR      r2,[sp,#&28]
;;;543    						c++;
;;;544    						a++;
0006aa  3401                        ADD      r4,#1
0006ac  3601                        ADD      r6,#1
0006ae  5250                        STRH     r0,[r2,r1]   ;;;542
0006b0  e7de                        B        F18L15
                            F18L50
;;;545    					}
;;;546    					else
;;;547    					{
;;;548    						temp[c]=data[b];
0006b2  9805                        LDR      r0,[sp,#&14]
                            F18L48
0006b4  5a39                        LDRH     r1,[r7,r0]
0006b6  0060                        LSL      r0,r4,#1
0006b8  9a0a                        LDR      r2,[sp,#&28]
;;;549    						c++;
;;;550    						b++;
0006ba  3401                        ADD      r4,#1
0006bc  3501                        ADD      r5,#1
0006be  5211                        STRH     r1,[r2,r0]   ;;;548
0006c0  e7d6                        B        F18L15
                            F18L47
;;;551    					}
;;;552    				}
;;;553    			}
;;;554    			memcpy(data+i,temp+i,step*sizeof(u16));
0006c2  9c03                        LDR      r4,[sp,#&c]
0006c4  990a                        LDR      r1,[sp,#&28]
0006c6  0060                        LSL      r0,r4,#1
0006c8  1841                        ADD      r1,r0,r1
0006ca  19c0                        ADD      r0,r7
0006cc  9a07                        LDR      r2,[sp,#&1c]
0006ce  f7ff fc97                   BL       memcpy
0006d2  9806                        LDR      r0,[sp,#&18]   ;;;511
0006d4  9003                        STR      r0,[sp,#&c]   ;;;511
                            F18L43
0006d6  980b                        LDR      r0,[sp,#&2c]   ;;;511
0006d8  9c03                        LDR      r4,[sp,#&c]   ;;;511
0006da  4284                        CMP      r4,r0   ;;;511
0006dc  dbb5                        BLT      F18L6   ;;;511
                            F18L44
;;;555    		}
;;;556    		step=step*2;
0006de  9807                        LDR      r0,[sp,#&1c]
                            F18L42
0006e0  9000                        STR      r0,[sp,#0]
0006e2  2800                        CMP      r0,#0   ;;;509
0006e4  da00                        BGE      F18L51   ;;;509
0006e6  3001                        ADD      r0,#1   ;;;509
                            F18L51
0006e8  1040                        ASR      r0,#1   ;;;509
0006ea  9b0b                        LDR      r3,[sp,#&2c]   ;;;509
0006ec  9004                        STR      r0,[sp,#&10]   ;;;509
0006ee  4298                        CMP      r0,r3   ;;;509
0006f0  dba5                        BLT      F18L4   ;;;509
0006f2  b00c                        ADD      sp,#&30   ;;;509
0006f4  bcf0                        POP      {r4-r7}   ;;;509
0006f6  bc08                        POP      {r3}   ;;;509
0006f8  4718                        BX       r3   ;;;509
;;;557    	}
;;;558    }
;;;559    
        AREA |C$$constdata|, DATA, READONLY

|x$constdata|
taglist
        DCD      |x$codeseg|+438
        DCD      |x$codeseg|+442
        DCD      |x$codeseg|+446
        DCD      |x$codeseg|+450
        DCD      |x$codeseg|+458
        DCD      |x$codeseg|+466
        DCD      |x$codeseg|+474
        DCD      |x$codeseg|+478
        DCD      |x$codeseg|+482
        DCD      |x$codeseg|+486
        DCD      |x$codeseg|+494
        DCD      |x$codeseg|+506
        DCD      |x$codeseg|+514
        DCD      |x$codeseg|+518
        DCD      |x$codeseg|+522
        DCD      |x$codeseg|+530
        DCD      |x$codeseg|+534
        DCD      |x$codeseg|+538
        DCD      |x$codeseg|+550
NUM_TAGS
        DCD      0x00000013

        AREA |C$$data|, DATA

|x$dataseg|
FILES
        DCD      |Image$$RO$$Limit|
DATA
        DCD      0x06004000
TEMP
        DCD      0x06008000
        DCD      0x00000001


        END
