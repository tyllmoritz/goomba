; generated by Norcroft  Thumb C vsn 1.20 (ARM Ltd SDT2.50) [Build number 80]


|x$codeseg| DATA

;;;1      #include "includes.h"
;;;2      
;;;3      #define page_size (16)
;;;4      #define page_size_2 (page_size*1024)
;;;5      
;;;6      u8 *const bank_0=(u8*)0x0600C000;
;;;7      u8 *const bank_1=(u8*)0x06014000;
;;;8      u8 *const bank_2=(u8*)0x06008000;
;;;9      
;;;10     #if MOVIEPLAYER
;;;11     int cache_queue_cursor;
;;;12     u16 prgcache[MAX_CACHE_SIZE];
;;;13     u8* cache_location[MAX_CACHE_SIZE];
;;;14     u8* cachebase;
;;;15     u8 cachepages;
;;;16     u32* pageoffsets;
;;;17     #endif
;;;18     
;;;19     u8 *make_instant_pages(u8* rom_base)
;;;20     {
000000                      make_instant_pages
000000  b4b0                        PUSH     {r4,r5,r7}
;;;21     	//this is for cases where there is no caching!
;;;22     	u32 *p=(u32*)rom_base;
;;;23     	int i;
;;;24     	
;;;25     #if MOVIEPLAYER
;;;26     	if (usingcache)
000002  4910                        LDR      r1,F1L1
000004  6809                        LDR      r1,[r1,#0]
000006  2900                        CMP      r1,#0
000008  d11a                        BNE      F1L19
;;;27     	{
;;;28     		return rom_base;
;;;29     	}
;;;30     #endif
;;;31     
;;;32     #if USETRIM
;;;33     	if (*p==TRIM)
00000a  24ff                        MOV      r4,#&ff
00000c  6801                        LDR      r1,[r0,#0]
00000e  4b0f                        LDR      r3,F1L1+8
000010  3401                        ADD      r4,#1
000012  4299                        CMP      r1,r3
000014  4a0c                        LDR      r2,F1L1+4
000016  d10a                        BNE      F1L20
;;;34     	{
;;;35     		p+=2;
;;;36     //		num_pages=p[0]/4-8;
;;;37     //		page_mask=num_pages-1;
;;;38     		for (i=0;i<256;i++)
000018  2100                        MOV      r1,#0
00001a  1dc7                        ADD      r7,r0,#7
00001c  3701                        ADD      r7,#1
                            F1L8
;;;39     		{
;;;40     			INSTANT_PAGES[i]=rom_base+p[i];//&page_mask];
00001e  008b                        LSL      r3,r1,#2
000020  58fd                        LDR      r5,[r7,r3]
000022  3101                        ADD      r1,#1   ;;;38
000024  182d                        ADD      r5,r0
000026  50d5                        STR      r5,[r2,r3]
000028  42a1                        CMP      r1,r4   ;;;38
00002a  dbf8                        BLT      F1L8   ;;;38
00002c  e007                        B        F1L21   ;;;38
                            F1L20
;;;41     		}
;;;42     	}
;;;43     	else
;;;44     #endif
;;;45     	{
;;;46     //		num_pages=(2<<rom_base[148]);
;;;47     //		page_mask=num_pages-1;
;;;48     		for (i=0;i<256;i++)
00002e  2100                        MOV      r1,#0
                            F1L11
;;;49     		{
;;;50     			INSTANT_PAGES[i]=rom_base+16384*(i);//&page_mask);
000030  038b                        LSL      r3,r1,#14
000032  181b                        ADD      r3,r0
000034  008f                        LSL      r7,r1,#2
000036  3101                        ADD      r1,#1   ;;;48
000038  42a1                        CMP      r1,r4   ;;;48
00003a  51d3                        STR      r3,[r2,r7]
00003c  dbf8                        BLT      F1L11   ;;;48
                            F1L21
;;;51     		}
;;;52     	}
;;;53     	return INSTANT_PAGES[0];
00003e  6810                        LDR      r0,[r2,#0]
                            F1L19
000040  bcb0                        POP      {r4,r5,r7}
000042  4770                        BX       lr
                            F1L1
000044  00000000                    DCD      usingcache
000048  00000000                    DCD      INSTANT_PAGES
00004c  4d495254                    DCD      0x4d495254

;;;54     }
;;;55     
;;;56     #if !MOVIEPLAYER
;;;57     void init_cache() {}
;;;58     #endif
;;;59     
;;;60     #if MOVIEPLAYER
;;;61     
;;;62     void init_cache()
;;;63     {
000050                      init_cache
000050  b5b0                        PUSH     {r4,r5,r7,lr}
;;;64     	int i;
;;;65     	u8* dest=(u8*)&Image$$RO$$Limit;
;;;66     #if RESIZABLE
;;;67     	u8 *end_of_cache=END_of_exram;
000052  491c                        LDR      r1,F2L1+4
000054  481a                        LDR      r0,F2L1   ;;;65
;;;68     #else
;;;69     	u8 *end_of_cache=(u8*)(&END_OF_EXRAM);
;;;70     #endif
;;;71     	if (!usingcache) return;
000056  680a                        LDR      r2,[r1,#0]
000058  491b                        LDR      r1,F2L1+8
00005a  6809                        LDR      r1,[r1,#0]
00005c  2900                        CMP      r1,#0
00005e  d02c                        BEQ      F2L18
;;;72     	
;;;73     //	g_banks[0]=0;
;;;74     //	g_banks[1]=1;
;;;75     	
;;;76     	cachebase=dest;
000060  491a                        LDR      r1,F2L1+12
;;;77     	cachepages=(end_of_cache-cachebase)/page_size_2;
000062  1a12                        SUB      r2,r0
000064  6048                        STR      r0,[r1,#4]
000066  d501                        BPL      F2L19
000068  4b19                        LDR      r3,F2L1+16
00006a  18d2                        ADD      r2,r3
                            F2L19
00006c  1392                        ASR      r2,#14
00006e  720a                        STRB     r2,[r1,#8]
;;;78     	//set up cache locations, first few are sequential
;;;79     	for (i=0;i<cachepages;i++)
000070  1c0b                        MOV      r3,r1
000072  7a1a                        LDRB     r2,[r3,#8]
000074  2100                        MOV      r1,#0
000076  4f17                        LDR      r7,F2L1+20
000078  e004                        B        F2L20
                            F2L8
;;;80     	{
;;;81     		cache_location[i]=cachebase+page_size_2*i;
00007a  038c                        LSL      r4,r1,#14
00007c  1825                        ADD      r5,r4,r0
00007e  008c                        LSL      r4,r1,#2
000080  513d                        STR      r5,[r7,r4]
000082  3101                        ADD      r1,#1   ;;;79
                            F2L20
000084  4291                        CMP      r1,r2   ;;;79
000086  dbf8                        BLT      F2L8   ;;;79
;;;82     	}
;;;83     	//two extra pages, then one more for GB mode
;;;84     	if (gb_mode==0)
000088  4813                        LDR      r0,F2L1+24
00008a  7800                        LDRB     r0,[r0,#0]
00008c  2800                        CMP      r0,#0
00008e  d104                        BNE      F2L21
;;;85     	{
;;;86     		cache_location[cachepages++]=bank_2;
000090  1c50                        ADD      r0,r2,#1
000092  7218                        STRB     r0,[r3,#8]
000094  4911                        LDR      r1,F2L1+28
000096  0090                        LSL      r0,r2,#2
000098  5039                        STR      r1,[r7,r0]
                            F2L21
;;;87     	}
;;;88     	cache_location[cachepages++]=bank_0;
00009a  7a19                        LDRB     r1,[r3,#8]
00009c  4810                        LDR      r0,F2L1+32
00009e  1c4a                        ADD      r2,r1,#1
0000a0  721a                        STRB     r2,[r3,#8]
0000a2  0089                        LSL      r1,#2
0000a4  5078                        STR      r0,[r7,r1]
;;;89     	cache_location[cachepages++]=bank_1;
0000a6  7a18                        LDRB     r0,[r3,#8]
0000a8  4a0e                        LDR      r2,F2L1+36
0000aa  1c41                        ADD      r1,r0,#1
0000ac  7219                        STRB     r1,[r3,#8]
0000ae  0080                        LSL      r0,#2
0000b0  503a                        STR      r2,[r7,r0]
;;;90     	clear_instant_prg();
0000b2  f7ff ffa5                   BL       clear_instant_prg
;;;91     	flushcache();
0000b6  f7ff ffa3                   BL       flushcache
                            F2L18
0000ba  bcb0                        POP      {r4,r5,r7}
0000bc  bc08                        POP      {r3}
0000be  4718                        BX       r3
                            F2L1
0000c0  00000000                    DCD      |Image$$RO$$Limit|
0000c4  00000000                    DCD      END_of_exram
0000c8  00000000                    DCD      usingcache
0000cc  00000000                    DCD      |x$dataseg|
0000d0  00003fff                    DCD      0x00003fff
0000d4  00000000                    DCD      cache_location
0000d8  00000000                    DCD      gb_mode
0000dc  06008000                    DCD      0x06008000
0000e0  0600c000                    DCD      0x0600c000
0000e4  06014000                    DCD      0x06014000

;;;92     //	usingcompcache=0;
;;;93     }
;;;94     
;;;95     void flushcache()
;;;96     {
0000e8                      flushcache
0000e8  b490                        PUSH     {r4,r7}
;;;97     	int i;
;;;98     
;;;99     	for (i=0;i<cachepages;i++)
0000ea  4a09                        LDR      r2,F3L1+8
0000ec  2000                        MOV      r0,#0
0000ee  4f06                        LDR      r7,F3L1
0000f0  4b06                        LDR      r3,F3L1+4
0000f2  7a11                        LDRB     r1,[r2,#8]
0000f4  e002                        B        F3L12
                            F3L4
;;;100    	{
;;;101    		prgcache[i]=65535;
0000f6  0044                        LSL      r4,r0,#1
0000f8  533b                        STRH     r3,[r7,r4]
0000fa  3001                        ADD      r0,#1   ;;;99
                            F3L12
0000fc  4288                        CMP      r0,r1   ;;;99
0000fe  dbfa                        BLT      F3L4   ;;;99
;;;102    	}
;;;103    	cache_queue_cursor=0;
000100  2000                        MOV      r0,#0
000102  6010                        STR      r0,[r2,#0]
000104  bc90                        POP      {r4,r7}
000106  4770                        BX       lr
                            F3L1
000108  00000000                    DCD      prgcache
00010c  0000ffff                    DCD      0x0000ffff
000110  00000000                    DCD      |x$dataseg|

;;;104    }
;;;105    
;;;106    void clear_instant_prg()
;;;107    {
000114                      clear_instant_prg
000114  b480                        PUSH     {r7}
;;;108    	int i;
;;;109    	int l = 256;
000116  22ff                        MOV      r2,#&ff
;;;110    	u32 *instant_prg = (u32*)INSTANT_PAGES;
000118  3201                        ADD      r2,#1
;;;111    	for (i=0;i<l;i++)
00011a  2000                        MOV      r0,#0
00011c  4904                        LDR      r1,F4L1   ;;;110
00011e  4b05                        LDR      r3,F4L1+4
000120  e002                        B        F4L12
                            F4L4
;;;112    	{
;;;113    		instant_prg[i]=0xC0000000;
000122  0087                        LSL      r7,r0,#2
000124  51cb                        STR      r3,[r1,r7]
000126  3001                        ADD      r0,#1   ;;;111
                            F4L12
000128  4290                        CMP      r0,r2   ;;;111
00012a  dbfa                        BLT      F4L4   ;;;111
00012c  bc80                        POP      {r7}   ;;;111
00012e  4770                        BX       lr   ;;;111
                            F4L1
000130  00000000                    DCD      INSTANT_PAGES   ;;;111
000134  c0000000                    DCD      0xc0000000   ;;;111

;;;114    	}
;;;115    }
;;;116    
;;;117    void regenerate_instant_prg()
;;;118    {
000138                      regenerate_instant_prg
000138  b4f0                        PUSH     {r4-r7}
;;;119    	int i;
;;;120    	u8**instant_prg=INSTANT_PAGES;
00013a  4a0a                        LDR      r2,F5L1
;;;121    
;;;122    	for (i=0;i<cachepages;i++)
00013c  2000                        MOV      r0,#0
00013e  4e0a                        LDR      r6,F5L1+4
000140  4d0a                        LDR      r5,F5L1+8
000142  4c0b                        LDR      r4,F5L1+12
000144  4f0b                        LDR      r7,F5L1+16
000146  e008                        B        F5L14
                            F5L4
;;;123    	{
;;;124    		int p=prgcache[i];
000148  0041                        LSL      r1,r0,#1
00014a  5a69                        LDRH     r1,[r5,r1]
;;;125    		if (p<65535)
00014c  42b1                        CMP      r1,r6
00014e  da03                        BGE      F5L15
;;;126    		{
;;;127    			instant_prg[p]=cache_location[i];
000150  0083                        LSL      r3,r0,#2
000152  58e3                        LDR      r3,[r4,r3]
000154  0089                        LSL      r1,#2
000156  5053                        STR      r3,[r2,r1]
                            F5L15
000158  3001                        ADD      r0,#1   ;;;122
                            F5L14
00015a  7a39                        LDRB     r1,[r7,#8]   ;;;122
00015c  4288                        CMP      r0,r1   ;;;122
00015e  dbf3                        BLT      F5L4   ;;;122
000160  bcf0                        POP      {r4-r7}   ;;;122
000162  4770                        BX       lr   ;;;122
                            F5L1
000164  00000000                    DCD      INSTANT_PAGES   ;;;122
000168  0000ffff                    DCD      0x0000ffff   ;;;122
00016c  00000000                    DCD      prgcache   ;;;122
000170  00000000                    DCD      cache_location   ;;;122
000174  00000000                    DCD      |x$dataseg|   ;;;122

;;;128    		}
;;;129    	}
;;;130    }
;;;131    
;;;132    void loadcachepage(int i,int bank) //i=slot, bank=bank that goes into the slot
;;;133    {
000178                      loadcachepage
000178  b5b0                        PUSH     {r4,r5,r7,lr}
;;;134    	u8 *dest;
;;;135    	if (usinggbamp)
00017a  4a12                        LDR      r2,F6L1
00017c  0087                        LSL      r7,r0,#2
00017e  6812                        LDR      r2,[r2,#0]
000180  0389                        LSL      r1,#14
000182  2a00                        CMP      r2,#0
000184  4d10                        LDR      r5,F6L1+4
000186  d00e                        BEQ      F6L11
;;;136    	{
;;;137    		FAT_fseek(rom_file, bank*page_size_2,SEEK_SET);
000188  4c10                        LDR      r4,F6L1+8
00018a  2200                        MOV      r2,#0
00018c  6820                        LDR      r0,[r4,#0]
00018e  f7ff ff37                   BL       FAT_fseek
;;;138    		dest =cache_location[i];
;;;139    		FAT_fread(dest,1,page_size_2,rom_file);
000192  2201                        MOV      r2,#1
000194  0392                        LSL      r2,#14
000196  59e8                        LDR      r0,[r5,r7]   ;;;138
000198  6823                        LDR      r3,[r4,#0]
00019a  2101                        MOV      r1,#1
00019c  f7ff ff30                   BL       FAT_fread
                            F6L9
0001a0  bcb0                        POP      {r4,r5,r7}
0001a2  bc08                        POP      {r3}
0001a4  4718                        BX       r3
                            F6L11
;;;140    	}
;;;141    	else
;;;142    	{
;;;143    		dest =cache_location[i];
;;;144    		memcpy(dest,romstart+bank*page_size_2,page_size_2);
0001a6  4a0a                        LDR      r2,F6L1+12
0001a8  59e8                        LDR      r0,[r5,r7]   ;;;143
0001aa  6812                        LDR      r2,[r2,#0]
0001ac  1889                        ADD      r1,r2
0001ae  2201                        MOV      r2,#1
0001b0  0392                        LSL      r2,#14
0001b2  f7ff ff25                   BL       memcpy
;;;145    		waitframe();
0001b6  f7ff ff23                   BL       waitframe
;;;146    		waitframe();
0001ba  f7ff ff21                   BL       waitframe
;;;147    		waitframe();
0001be  f7ff ff1f                   BL       waitframe
0001c2  e7ed                        B        F6L9
                            F6L1
0001c4  00000000                    DCD      usinggbamp
0001c8  00000000                    DCD      cache_location
0001cc  00000000                    DCD      rom_file
0001d0  00000000                    DCD      romstart

;;;148    	}
;;;149    }
;;;150    
;;;151    void getbank(int kilobyte)
;;;152    {
0001d4                      getbank
0001d4  b5f0                        PUSH     {r4-r7,lr}
;;;153    	int bank;
;;;154    	u32 i,j;
;;;155    	int slotcontent;
;;;156    //	u8 *src, *dest;
;;;157    	u8 *banks=g_banks;
0001d6  4a19                        LDR      r2,F7L1
;;;158    	bank=kilobyte/page_size;
0001d8  2800                        CMP      r0,#0
0001da  da00                        BGE      F7L29
0001dc  300f                        ADD      r0,#&f
                            F7L29
0001de  1101                        ASR      r1,r0,#4
;;;159    	
;;;160    	//page is in cache?
;;;161    	for (i=0;i<cachepages;i++)
0001e0  4c18                        LDR      r4,F7L1+8
0001e2  2300                        MOV      r3,#0
0001e4  4e16                        LDR      r6,F7L1+4
0001e6  7a20                        LDRB     r0,[r4,#8]
0001e8  e004                        B        F7L30
                            F7L6
;;;162    	{
;;;163    		if (prgcache[i]==bank)
0001ea  005f                        LSL      r7,r3,#1
0001ec  5bf7                        LDRH     r7,[r6,r7]
0001ee  428f                        CMP      r7,r1
0001f0  d021                        BEQ      F7L31
0001f2  3301                        ADD      r3,#1   ;;;161
                            F7L30
0001f4  4283                        CMP      r3,r0   ;;;161
0001f6  d3f8                        BCC      F7L6   ;;;161
                            F7L11
;;;164    		{
;;;165    			return;
;;;166    		}
;;;167    	}
;;;168    	
;;;169    slot_is_locked:
;;;170    	i=cache_queue_cursor;
0001f8  4c12                        LDR      r4,F7L1+8
;;;171    	cache_queue_cursor++;
;;;172    	slotcontent=prgcache[i];
0001fa  4e11                        LDR      r6,F7L1+4
0001fc  6827                        LDR      r7,[r4,#0]   ;;;171
0001fe  1c7b                        ADD      r3,r7,#1
000200  007d                        LSL      r5,r7,#1
000202  6023                        STR      r3,[r4,#0]
000204  5b75                        LDRH     r5,[r6,r5]
;;;173    	if (cache_queue_cursor>=cachepages) cache_queue_cursor=0;
000206  4283                        CMP      r3,r0
000208  db01                        BLT      F7L32
00020a  2300                        MOV      r3,#0
00020c  6023                        STR      r3,[r4,#0]
                            F7L32
;;;174    
;;;175    	for (j=0;j<2;j++)
00020e  4e0e                        LDR      r6,F7L1+12
000210  2400                        MOV      r4,#0
                            F7L14
;;;176    	{
;;;177    		if (slotcontent!=65535)
000212  42b5                        CMP      r5,r6
000214  d006                        BEQ      F7L33
;;;178    		{
;;;179    			if (banks[j]*16/page_size==slotcontent)
000216  5d13                        LDRB     r3,[r2,r4]
000218  011b                        LSL      r3,#4
00021a  d500                        BPL      F7L34
00021c  330f                        ADD      r3,#&f
                            F7L34
00021e  111b                        ASR      r3,#4
000220  42ab                        CMP      r3,r5
000222  d0e9                        BEQ      F7L11
                            F7L33
000224  3401                        ADD      r4,#1   ;;;175
000226  2c02                        CMP      r4,#2   ;;;175
000228  d3f3                        BCC      F7L14   ;;;175
;;;180    			{
;;;181    				goto slot_is_locked;
;;;182    			}
;;;183    		}
;;;184    	}
;;;185    	prgcache[i]=bank;
00022a  007a                        LSL      r2,r7,#1
00022c  4e04                        LDR      r6,F7L1+4
;;;186    
;;;187    #if 0
;;;188    	if (usingcompcache)
;;;189    	{
;;;190    		int srcoffset;
;;;191    		srcoffset = 16 + pageoffsets[bank];
;;;192    //		dest = (u8*)06014000;
;;;193    //		FAT_fseek(rom_file,srcoffset,SEEK_SET);
;;;194    //		src=FAT_fread_16(dest,1,16384,rom_file);
;;;195    
;;;196    		dest = cachebase+0x4000*cachepages;
;;;197    		FAT_fseek(rom_file,srcoffset,SEEK_SET);
;;;198    		FAT_fread(dest,1,16384,rom_file);
;;;199    		src=dest;
;;;200    		dest =cachebase+0x4000*i;
;;;201    		depack(src,dest);
;;;202    	}
;;;203    	else
;;;204    #endif
;;;205    	loadcachepage(i,bank);
00022e  1c38                        MOV      r0,r7
000230  52b1                        STRH     r1,[r6,r2]   ;;;185
000232  f7ff ffa1                   BL       loadcachepage
                            F7L31
000236  bcf0                        POP      {r4-r7}
000238  bc08                        POP      {r3}
00023a  4718                        BX       r3
                            F7L1
00023c  00000000                    DCD      g_banks
000240  00000000                    DCD      prgcache
000244  00000000                    DCD      |x$dataseg|
000248  0000ffff                    DCD      0x0000ffff

;;;206    }
;;;207    
;;;208    void get_rom_map()
;;;209    {
00024c                      get_rom_map
00024c  b4f0                        PUSH     {r4-r7}
;;;210    	u8 *banks=g_banks;
00024e  4d0b                        LDR      r5,F8L1
;;;211    	u8**memmap = g_memmap_tbl;
000250  4f0b                        LDR      r7,F8L1+4
;;;212    	u8**instant_prg = INSTANT_PAGES;
000252  4b0c                        LDR      r3,F8L1+8
;;;213    	int i;
;;;214    	int j;
;;;215    
;;;216    	for (i=0;i<2;i++)
000254  2000                        MOV      r0,#0
                            F8L4
;;;217    	{
;;;218    		u8* data=instant_prg[banks[i]]-(i*16384);
000256  5c29                        LDRB     r1,[r5,r0]
000258  0089                        LSL      r1,#2
00025a  5859                        LDR      r1,[r3,r1]
00025c  0382                        LSL      r2,r0,#14
00025e  1a8a                        SUB      r2,r1,r2
;;;219    		for (j=0;j<4;j++)
000260  2100                        MOV      r1,#0
000262  0084                        LSL      r4,r0,#2
                            F8L5
;;;220    		{
;;;221    			memmap[i*4+j]=data;
000264  1866                        ADD      r6,r4,r1
000266  00b6                        LSL      r6,#2
000268  3101                        ADD      r1,#1   ;;;219
00026a  2904                        CMP      r1,#4   ;;;219
00026c  51ba                        STR      r2,[r7,r6]
00026e  dbf9                        BLT      F8L5   ;;;219
000270  3001                        ADD      r0,#1   ;;;216
000272  2802                        CMP      r0,#2   ;;;216
000274  dbef                        BLT      F8L4   ;;;216
000276  bcf0                        POP      {r4-r7}   ;;;216
000278  4770                        BX       lr   ;;;216
00027a  0000                        LSL      r0,#0   ;;;216
                            F8L1
00027c  00000000                    DCD      g_banks   ;;;216
000280  00000000                    DCD      g_memmap_tbl   ;;;216
000284  00000000                    DCD      INSTANT_PAGES   ;;;216

;;;222    		}
;;;223    	}
;;;224    }
;;;225    void update_cache()
;;;226    {
000288                      update_cache
000288  b590                        PUSH     {r4,r7,lr}
;;;227    	//updates the cache's state, and all the lookup tables
;;;228    	//also fixes the memory map and vram map
;;;229    	u8 *banks=g_banks;
00028a  4c09                        LDR      r4,F9L1
;;;230    	int i;
;;;231    
;;;232    	clear_instant_prg();
00028c  f7ff ff42                   BL       clear_instant_prg
;;;233    	for (i=0;i<2;i++)
000290  2700                        MOV      r7,#0
                            F9L4
;;;234    	{
;;;235    		getbank(banks[i]*16);
000292  5de0                        LDRB     r0,[r4,r7]
000294  0100                        LSL      r0,#4
000296  f7ff ff9d                   BL       getbank
00029a  3701                        ADD      r7,#1   ;;;233
00029c  2f02                        CMP      r7,#2   ;;;233
00029e  dbf8                        BLT      F9L4   ;;;233
;;;236    	}
;;;237    	regenerate_instant_prg();
0002a0  f7ff ff4a                   BL       regenerate_instant_prg
;;;238    	get_rom_map();
0002a4  f7ff ffd2                   BL       get_rom_map
0002a8  bc90                        POP      {r4,r7}
0002aa  bc08                        POP      {r3}
0002ac  4718                        BX       r3
0002ae  0000                        LSL      r0,#0
                            F9L1
0002b0  00000000                    DCD      g_banks

;;;239    }
;;;240    
;;;241    #if RESIZABLE
;;;242    void add_exram()
;;;243    {
0002b4                      add_exram
0002b4  b590                        PUSH     {r4,r7,lr}
;;;244    	GBC_exramsize=0x6000;
0002b6  2203                        MOV      r2,#3
0002b8  4809                        LDR      r0,F10L1
0002ba  0352                        LSL      r2,#13
;;;245    	GBC_exram=END_of_exram-GBC_exramsize;
0002bc  4c09                        LDR      r4,F10L1+4
0002be  6002                        STR      r2,[r0,#0]
0002c0  6820                        LDR      r0,[r4,#0]
0002c2  4f09                        LDR      r7,F10L1+8
0002c4  1a80                        SUB      r0,r2
;;;246    	memset(GBC_exram,0,GBC_exramsize);
0002c6  6038                        STR      r0,[r7,#0]
0002c8  2100                        MOV      r1,#0
0002ca  f7ff fe99                   BL       memset
;;;247    	END_of_exram=GBC_exram;
;;;248    	init_cache();
0002ce  6838                        LDR      r0,[r7,#0]
0002d0  6020                        STR      r0,[r4,#0]
0002d2  f7ff febd                   BL       init_cache
;;;249    	update_cache();
0002d6  f7ff ffd7                   BL       update_cache
0002da  bc90                        POP      {r4,r7}
0002dc  bc08                        POP      {r3}
0002de  4718                        BX       r3
                            F10L1
0002e0  00000000                    DCD      GBC_exramsize
0002e4  00000000                    DCD      END_of_exram
0002e8  00000000                    DCD      GBC_exram

;;;250    }
;;;251    #endif
;;;252    
;;;253    void reload_vram_page1()
;;;254    {
0002ec                      reload_vram_page1
0002ec  b500                        PUSH     {lr}
;;;255    	int i=cachepages-2;
0002ee  4806                        LDR      r0,F11L1
;;;256    	int bank=prgcache[i];
0002f0  4a06                        LDR      r2,F11L1+4
0002f2  7a00                        LDRB     r0,[r0,#8]   ;;;255
;;;257    	if (bank<65535)
0002f4  4b06                        LDR      r3,F11L1+8
0002f6  3802                        SUB      r0,#2   ;;;256
0002f8  0041                        LSL      r1,r0,#1   ;;;256
0002fa  5a51                        LDRH     r1,[r2,r1]   ;;;256
0002fc  4299                        CMP      r1,r3
0002fe  da01                        BGE      F11L10
;;;258    	{
;;;259    		loadcachepage(i,bank);
000300  f7ff ff3a                   BL       loadcachepage
                            F11L10
000304  bc08                        POP      {r3}
000306  4718                        BX       r3
                            F11L1
000308  00000000                    DCD      |x$dataseg|
00030c  00000000                    DCD      prgcache
000310  0000ffff                    DCD      0x0000ffff
;;;260    	}
;;;261    }
;;;262    
;;;263    
;;;264    #endif
;;;265    
        AREA |C$$constdata|, DATA, READONLY

|x$constdata|
bank_0
        DCD      0x0600c000
bank_1
        DCD      0x06014000
bank_2
        DCD      0x06008000

        AREA |C$$data|, DATA

|x$dataseg|
cache_queue_cursor
        DCD      00000000
cachebase
        DCD      00000000
cachepages
        DCB      00,00,00,00
pageoffsets
        DCD      00000000

        AREA |C$$zinit|, NOINIT

prgcache
        % 32
cache_location
        % 64


        END
